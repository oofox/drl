// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrlClient is the client API for Drl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrlClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Drl_ConnectClient, error)
}

type drlClient struct {
	cc grpc.ClientConnInterface
}

func NewDrlClient(cc grpc.ClientConnInterface) DrlClient {
	return &drlClient{cc}
}

func (c *drlClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Drl_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Drl_ServiceDesc.Streams[0], "/drl/connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &drlConnectClient{stream}
	return x, nil
}

type Drl_ConnectClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type drlConnectClient struct {
	grpc.ClientStream
}

func (x *drlConnectClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *drlConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DrlServer is the server API for Drl service.
// All implementations must embed UnimplementedDrlServer
// for forward compatibility
type DrlServer interface {
	Connect(Drl_ConnectServer) error
	mustEmbedUnimplementedDrlServer()
}

// UnimplementedDrlServer must be embedded to have forward compatible implementations.
type UnimplementedDrlServer struct {
}

func (UnimplementedDrlServer) Connect(Drl_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDrlServer) mustEmbedUnimplementedDrlServer() {}

// UnsafeDrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrlServer will
// result in compilation errors.
type UnsafeDrlServer interface {
	mustEmbedUnimplementedDrlServer()
}

func RegisterDrlServer(s grpc.ServiceRegistrar, srv DrlServer) {
	s.RegisterService(&Drl_ServiceDesc, srv)
}

func _Drl_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DrlServer).Connect(&drlConnectServer{stream})
}

type Drl_ConnectServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type drlConnectServer struct {
	grpc.ServerStream
}

func (x *drlConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *drlConnectServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Drl_ServiceDesc is the grpc.ServiceDesc for Drl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drl",
	HandlerType: (*DrlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "connect",
			Handler:       _Drl_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gen/drl.proto",
}
